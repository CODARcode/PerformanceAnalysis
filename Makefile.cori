LIB_NAME = chimbuko

INC_DIRS := include 3rdparty ${ZEROMQ_ROOT}/include
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

BIN_DIR ?= bin
BUILD_DIR ?= build
SRC_DIRS ?= src
LIB_DIR ?= lib

CXX := CC
CXX_FLAGS := $(INC_FLAGS) -MMD -MP -Wall -Wextra -std=c++17 -O3 -lstdc++fs

LDFLAGS := -L$(LIB_DIR) -L${ZEROMQ_ROOT}/lib  -L${CHIMBUKO}/lib -l$(LIB_NAME) -Wl,-rpath,\$$ORIGIN/../${LIB_DIR}

ADIOS2_INC = -isystem /global/common/sw/cray/cnl7/haswell/adios2/2.4.0/intel/19.0.3.199/26fprnf/include
#ADIOS2_INC = ${ADIOS_INC}
#ADIOS2_FLAGS = ${ADIOS_LIB}
ADIOS2_FLAGS = `adios2-config --cxx-libs`


CURL_FLAGS = `curl-config --libs`

#PS_FLAGS = -D_USE_MPINET
PS_FLAGS = -D_USE_ZMQNET

TARGET_LIB := lib/lib${LIB_NAME}.so
EXEC_SRCS := $(wildcard *.cpp)
EXEC_TARS := $(patsubst %.cpp,bin/%,$(EXEC_SRCS))
SRCS = $(shell find $(SRC_DIRS) -name "*.cpp")
OBJS = $(SRCS:%.cpp=$(BUILD_DIR)/%.o)
DEPS = $(OBJS:.o=.d)

all: $(EXEC_TARS) $(TARGET_LIB)
	cp ws_flask_stat.py bin

debugvars:
	@echo $(ADIOS2_INC)
	@echo $(ADIOS2_FLAGS)
	@echo $(SRCS)
	@echo $(OBJS)
	@echo $(EXEC_SRCS)
	@echo $(EXEC_TARS)
	@echo $(TARGET_LIB)

bin/%: build/%.o | $(TARGET_LIB)
	$(MKDIR_P) $(@D)
	$(CXX) $(CXX_FLAGS) $(PS_FLAGS) $(ADIOS2_INC) $< $(LDFLAGS) $(CURL_FLAGS) $(ADIOS2_FLAGS)  -lzmq -lstdc++fs -o $@ -lm 

lib/lib$(LIB_NAME).so: $(OBJS)
	$(MKDIR_P) $(@D)
	$(CXX) $(CXX_FLAGS) $(PS_FLAGS) $(ADIOS2_INC) $(ADIOS2_FLAGS)  $^ -shared -Wl,-soname,lib$(LIB_NAME).so -o $@ -lm

$(BUILD_DIR)/%.o: %.cpp
	$(MKDIR_P) $(@D)
	$(CXX) -c -fPIC $(CXX_FLAGS) $(PS_FLAGS) $(ADIOS2_INC)  $<  -o $@ $(ADIOS2_FLAGS) $(CURL_FLAGS) -lm

test/%.o: %.cpp
	$(CXX) -c $(CXX_FLAGS) $(PS_FLAGS) $(ADIOS2_INC)  $< -o $@ $(ADIOS2_FLAGS) $(CURL_FLAGS)


.PHONY: clean

clean:
	$(RM) -r $(BUILD_DIR) $(BIN_DIR) $(LIB_DIR)
	$(RM) -rf scripts/docker/test scripts/summit/test

-include $(DEPS)

MKDIR_P ?= mkdir -p

RM ?= rm
